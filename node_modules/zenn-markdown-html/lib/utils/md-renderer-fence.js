"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdRendererFence = void 0;
// get langName supporting diff
// - `diff js` => `diff-js`
// - `js diff` => `js-diff`
// - `js` => `js`
function normalizeLangName(str) {
    return str
        .split(' ')
        .filter(function (lang) { return !!lang; })
        .join('-');
}
function mdRendererFence(md) {
    // default renederer
    var defaultRender = md.renderer.rules.fence ||
        function (tokens, idx, options, env, self) {
            return self.renderToken(tokens, idx, options);
        };
    // override fence
    md.renderer.rules.fence = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var tokens = args[0], idx = args[1];
        // e.g. info = `js:fooBar.js`
        var langInfo = tokens[idx].info.split(/:/);
        var langName = (langInfo === null || langInfo === void 0 ? void 0 : langInfo.length) ? normalizeLangName(langInfo[0]) : '';
        if (langName === 'mermaid') {
            return "<div class=\"embed-mermaid\"><embed-mermaid><pre class=\"zenn-mermaid\">" + md.utils.escapeHtml(tokens[idx].content.trim()) + "</pre></embed-mermaid></div>";
        }
        // Override info (e.g "js:fooBar.js" -> "js")
        // - This value is read by syntax highlighter.
        // - Should not pass unsupported langName such as `mermaid`,
        //   otherwise `Language does not exist` is shown on console.
        tokens[idx].info = langName;
        var originalHTML = defaultRender.apply(void 0, args);
        if (tokens[idx].content.length === 0)
            return originalHTML;
        // e.g `js:fooBar.js` => `fooBar.js`
        var labelText = langName.length && langInfo[1] ? langInfo[1] : null;
        return "\n      <div class=\"code-block-container\">\n        " + (labelText
            ? "<div class=\"code-block-filename-container\"><span class=\"code-block-filename\">" + md.utils.escapeHtml(labelText) + "</span></div>"
            : '') + "\n        " + originalHTML + "\n      </div>\n      ";
    };
}
exports.mdRendererFence = mdRendererFence;

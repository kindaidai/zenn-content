"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mdPrism = void 0;
var prismjs_1 = __importDefault(require("prismjs"));
var components_1 = __importDefault(require("prismjs/components/"));
var prism_diff_highlight_1 = __importDefault(require("@steelydylan/prism-diff-highlight"));
// diffプラグインを有効化
prism_diff_highlight_1.default();
var DEFAULTS = {
    plugins: [],
    init: function () {
        // do nothing by default
    },
};
/**
 * Loads the provided {@code lang} into prism.
 *
 * @param lang
 *        Code of the language to load.
 * @param isDiff
 *        whether to use diff with language or not
 * @return The Prism language object for the provided {@code lang} code. {@code undefined} if the language is not known to Prism.
 */
function loadPrismLang(lang) {
    if (!lang)
        return undefined;
    var langObject = prismjs_1.default.languages[lang];
    if (langObject === undefined) {
        components_1.default([lang]);
        langObject = prismjs_1.default.languages[lang];
    }
    return langObject;
}
/**
 * Check given lang should be treated as `diff` and parse name of language.
 *
 * @param lang
 *        String given by `markdown-it`. this must be lower case.
 * @return  whether `lang` includes `diff` or not, and parsed name if recognized as `diff`.
 *          If not, return `lang` directly.
 *
 */
function checkIncludingDiff(lang) {
    var _a;
    // TODO: Determine the method to find `diff`(`match`, `indexOf` e.t.c.).
    var langs = lang.split('-');
    var hasDiff = langs.some(function (lang) { return lang === 'diff'; });
    if (hasDiff) {
        var newLang = (_a = langs.find(function (lang) { return lang !== 'diff'; })) !== null && _a !== void 0 ? _a : '';
        return {
            isDiff: true,
            lang: newLang,
        };
    }
    return {
        isDiff: false,
        lang: lang,
    };
}
var fallbackLanguages = {
    vue: 'html',
    react: 'jsx',
    fish: 'shell',
    sh: 'shell',
    cwl: 'yaml',
    tf: 'hcl',
};
/**
 * Select the language to use for highlighting, based on the provided options and the specified language.
 *
 * @param lang
 *        Code of the language to highlight the text in.
 * @return  The name of the language to use and the Prism language object for that language.
 */
function selectLanguage(lang) {
    var loweredLang = (lang === null || lang === void 0 ? void 0 : lang.toLowerCase()) || '';
    var _a = checkIncludingDiff(loweredLang), isDiff = _a.isDiff, langNormalized = _a.lang;
    var langAlias = fallbackLanguages[langNormalized];
    var langToUse = langAlias || langNormalized;
    var prismLang = loadPrismLang(langToUse);
    return {
        langToUse: langToUse,
        grammer: prismLang,
        isDiff: isDiff,
    };
}
/**
 * Highlights the provided text using Prism.
 *
 * @param markdownit
 *        The markdown-it instance
 * @param text
 *        The text to highlight.
 * @param lang
 *        Code of the language to highlight the text in.
 * @return {@code text} wrapped in {@code &lt;pre&gt;} and {@code &lt;code&gt;}, both equipped with the appropriate class
 *  (markdown-it’s langPrefix + lang). If Prism knows {@code lang}, {@code text} will be highlighted by it.
 */
function highlight(markdownit, text, lang) {
    var _a = selectLanguage(lang), langToUse = _a.langToUse, isDiff = _a.isDiff, grammer = _a.grammer;
    // 1. Use `diff` highlight with `language` if set.
    // 2. Use `language` (or `diff`, which is included) only.
    // 3. Use plain Markdown.
    var code = grammer
        ? isDiff
            ? prismjs_1.default.highlight(text, prismjs_1.default.languages.diff, 'diff-' + langToUse)
            : prismjs_1.default.highlight(text, grammer, langToUse)
        : isDiff
            ? prismjs_1.default.highlight(text, prismjs_1.default.languages.diff, 'diff')
            : markdownit.utils.escapeHtml(text);
    var classAttribute = langToUse
        ? isDiff
            ? " class=\"diff-highlight " + markdownit.options.langPrefix + "diff-" + markdownit.utils.escapeHtml(langToUse) + "\""
            : " class=\"" + markdownit.options.langPrefix + markdownit.utils.escapeHtml(langToUse) + "\""
        : '';
    return "<pre" + classAttribute + "><code" + classAttribute + ">" + code + "</code></pre>";
}
/**
 * Initialisation function of the plugin. This function is not called directly by clients, but is rather provided
 * to MarkdownIt’s {@link MarkdownIt.use} function.
 *
 * @param markdownit
 *        The markdown it instance the plugin is being registered to.
 * @param useroptions
 *        The options this plugin is being initialised with.
 */
function mdPrism(markdownit, useroptions) {
    var options = Object.assign({}, DEFAULTS, useroptions);
    options.init(prismjs_1.default);
    // register ourselves as highlighter
    markdownit.options.highlight = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return highlight.apply(void 0, __spreadArrays([markdownit], args));
    };
}
exports.mdPrism = mdPrism;

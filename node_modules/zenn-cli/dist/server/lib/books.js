"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalChapterMetaList = exports.getLocalChapter = exports.getLocalBookMetaList = exports.getLocalBookMeta = exports.getLocalBook = void 0;
var js_yaml_1 = __importDefault(require("js-yaml"));
var path_1 = __importDefault(require("path"));
var image_size_1 = __importDefault(require("image-size"));
var gray_matter_1 = __importDefault(require("gray-matter"));
var zenn_markdown_html_1 = __importDefault(require("zenn-markdown-html"));
var Log = __importStar(require("./log"));
var helper_1 = require("./helper");
function getLocalBook(slug) {
    var bookMeta = getLocalBookMeta(slug);
    if (!bookMeta)
        return null;
    // get details
    var fullDirpath = getBookFullDirpath(slug);
    var coverData = readCoverFile(path_1.default.join(fullDirpath, 'cover.jpg')) ||
        readCoverFile(path_1.default.join(fullDirpath, 'cover.jpeg')) ||
        readCoverFile(path_1.default.join(fullDirpath, 'cover.png'));
    if (!coverData)
        return bookMeta;
    return __assign(__assign({}, bookMeta), coverData);
}
exports.getLocalBook = getLocalBook;
function getLocalBookMeta(slug) {
    var bookMeta = readBookFile(slug);
    if (!bookMeta)
        return null;
    var specifiedChapterSlugs = bookMeta.specifiedChapterSlugs;
    var errorFilename = "books/" + slug + "/config.yaml";
    if (specifiedChapterSlugs) {
        if (!Array.isArray(specifiedChapterSlugs)) {
            Log.error(errorFilename + "\u306E chapters \u306B\u306Fslug\u306E\u914D\u5217\u306E\u307F\u3092\u6307\u5B9A\u3067\u304D\u307E\u3059");
            return null;
        }
        var anyNonStringSlug = specifiedChapterSlugs.some(function (slug) { return typeof slug !== 'string'; });
        if (anyNonStringSlug) {
            Log.error(errorFilename + "\u306E chapters \u306B\u306F\u6587\u5B57\u5217\u306Eslug\u306E\u307F\u3092\u542B\u3081\u308B\u3053\u3068\u304C\u3067\u304D\u307E\u3059\u3002");
            return null;
        }
        var anyInvalidFormatSlug = specifiedChapterSlugs.some(function (slug) {
            return / - /.test(slug);
        });
        if (anyInvalidFormatSlug) {
            Log.error(errorFilename + "\u306E chapters \u306B\u306F\u4E00\u6B21\u5143\u914D\u5217\u306E\u307F\u3092\u6307\u5B9A\u3067\u304D\u307E\u3059\u3002\u30CD\u30B9\u30C8\u306F\u3067\u304D\u307E\u305B\u3093");
            return null;
        }
    }
    return bookMeta;
}
exports.getLocalBookMeta = getLocalBookMeta;
function getLocalBookMetaList(sort) {
    var slugs = getBookSlugs(sort);
    var books = slugs
        .map(function (slug) { return getLocalBookMeta(slug); })
        .filter(function (book) { return book !== null; });
    return books;
}
exports.getLocalBookMetaList = getLocalBookMetaList;
function getLocalChapter(book, chapterFilename) {
    var data = readChapterFile(book, chapterFilename);
    if (!data)
        return null;
    var meta = data.meta, bodyMarkdown = data.bodyMarkdown;
    var rawHtml = zenn_markdown_html_1.default(bodyMarkdown);
    var bodyHtml = helper_1.completeHtml(rawHtml);
    return __assign(__assign({}, meta), { bodyHtml: bodyHtml });
}
exports.getLocalChapter = getLocalChapter;
function getLocalChapterMeta(book, chapterFilename) {
    var data = readChapterFile(book, chapterFilename);
    return data ? data.meta : null;
}
function getLocalChapterMetaList(book) {
    var filenames = getChapterFilenames(book.slug);
    var chapters = filenames
        .map(function (chapterFilename) { return getLocalChapterMeta(book, chapterFilename); })
        .filter(function (chapter) { return chapter !== null; })
        .sort(function (a, b) {
        return (Number(a.position === null ? 999 : a.position) -
            Number(b.position === null ? 999 : b.position));
    });
    return chapters;
}
exports.getLocalChapterMetaList = getLocalChapterMetaList;
function getBookSlugs(sort) {
    var dirFullpath = helper_1.getWorkingPath('books');
    var listOrderedDirs = sort === 'system' ? helper_1.listDirnames : helper_1.listDirnamesOrderByModified;
    return listOrderedDirs(dirFullpath) || [];
}
function readBookFile(slug) {
    var _a;
    var configRaw = getBookConfigRaw(slug);
    if (!configRaw)
        return null;
    try {
        var yamlData = js_yaml_1.default.load(configRaw);
        if (typeof yamlData === 'string' || typeof yamlData === 'number') {
            throw 'Invalid yaml format.';
        }
        if (!yamlData)
            return null;
        return __assign(__assign({ slug: slug }, yamlData), { specifiedChapterSlugs: yamlData.chapters, chapterOrderedByConfig: !!((_a = yamlData.chapters) === null || _a === void 0 ? void 0 : _a.length) });
    }
    catch (e) {
        // couldn't load yaml files
        console.log(e);
        Log.error("config.yaml\u306E\u8868\u8A18\u306B\u8AA4\u308A\u304C\u3042\u308A\u307E\u3059\uFF08books/" + slug + "\uFF09");
        return null;
    }
}
function getBookFullDirpath(slug) {
    return helper_1.getWorkingPath("books/" + slug);
}
function getBookConfigRaw(slug) {
    var fullDirpath = getBookFullDirpath(slug);
    var fullpath = path_1.default.join(fullDirpath, 'config.yaml');
    var fallbackFullpath = path_1.default.join(fullDirpath, 'config.yml');
    var fileRaw = helper_1.getFileRaw(fullpath) || helper_1.getFileRaw(fallbackFullpath);
    if (!fileRaw) {
        Log.error(fullpath + "\u306E\u5185\u5BB9\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F");
    }
    return fileRaw;
}
function readCoverFile(imageFullpath) {
    try {
        var bufferImage = helper_1.getImageRaw(imageFullpath);
        if (!bufferImage)
            return null;
        var coverFilesize = helper_1.getImageSize(imageFullpath);
        var _a = image_size_1.default(bufferImage), width = _a.width, height = _a.height;
        var mediaType = imageFullpath.endsWith('.png')
            ? 'image/png'
            : 'image/jpeg';
        var coverDataUrl = helper_1.bufferToDataURL(bufferImage, mediaType);
        return {
            coverDataUrl: coverDataUrl,
            coverFilesize: coverFilesize,
            coverWidth: width,
            coverHeight: height,
        };
    }
    catch (e) {
        return null;
    }
}
function getChapterPositionAndSlug(book, filename) {
    var _a;
    var filenameWithoutExt = filename.replace(/\.md$/, '');
    // get chapter number according to book.specifiedChapterSlugs (originally specified on config.yaml)
    if ((_a = book.specifiedChapterSlugs) === null || _a === void 0 ? void 0 : _a.length) {
        var slug_1 = filenameWithoutExt;
        var chapterIndex = book.specifiedChapterSlugs.findIndex(function (s) { return s === slug_1; });
        return {
            slug: slug_1,
            position: chapterIndex >= 0 ? chapterIndex : null,
        };
    }
    // get chapter number by filename
    var split = filenameWithoutExt.split('.');
    // filename must be `n.slug.md`
    if (split.length === 2) {
        var position = Number(split[0]);
        var slug = split[1];
        return {
            position: position,
            slug: slug,
        };
    }
    else {
        // invalid filename
        return {
            position: null,
            slug: filenameWithoutExt,
        };
    }
}
function getChapterFilenames(bookSlug) {
    var dirpath = helper_1.getWorkingPath("books/" + bookSlug);
    var allFiles = helper_1.listFilenames(dirpath);
    if (allFiles === null) {
        Log.error(dirpath + "\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F");
        return [];
    }
    return allFiles ? allFiles.filter(function (f) { return f.match(/\.md$/); }) : []; // filter markdown files
}
function readChapterFile(book, filename) {
    var _a = getChapterPositionAndSlug(book, filename), position = _a.position, slug = _a.slug;
    var raw = getChapterFileRaw(book.slug, filename);
    if (!raw)
        return null;
    var _b = gray_matter_1.default(raw), data = _b.data, bodyMarkdown = _b.content;
    return {
        meta: __assign(__assign({}, data), { position: position, slug: slug, filename: filename }),
        bodyMarkdown: bodyMarkdown,
    };
}
function getChapterFileRaw(bookSlug, chapterFilename) {
    var fullpath = helper_1.getWorkingPath("books/" + bookSlug + "/" + chapterFilename);
    var fileRaw = helper_1.getFileRaw(fullpath);
    if (!fileRaw) {
        Log.error(fullpath + "\u306E\u5185\u5BB9\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F");
    }
    return fileRaw;
}

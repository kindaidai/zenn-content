"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalArticleMetaList = exports.getLocalArticle = void 0;
var gray_matter_1 = __importDefault(require("gray-matter"));
var Log = __importStar(require("./log"));
var helper_1 = require("./helper");
var zenn_markdown_html_1 = __importDefault(require("zenn-markdown-html"));
function getLocalArticle(slug) {
    var data = readArticleFile(slug);
    if (!data)
        return null;
    var meta = data.meta, bodyMarkdown = data.bodyMarkdown;
    var rawHtml = zenn_markdown_html_1.default(bodyMarkdown);
    var bodyHtml = helper_1.completeHtml(rawHtml);
    return __assign(__assign({}, meta), { bodyHtml: bodyHtml });
}
exports.getLocalArticle = getLocalArticle;
function getLocalArticleMetaList(sort) {
    var slugs = getArticleSlugs(sort);
    var articles = slugs
        ? slugs
            .map(function (slug) { return getArticleMetaData(slug); })
            .filter(function (article) { return article !== null; })
        : [];
    return articles;
}
exports.getLocalArticleMetaList = getLocalArticleMetaList;
function getArticleSlugs(sort) {
    return getArticleFilenames(sort).map(function (n) { return n.replace(/\.md$/, ''); });
}
function getArticleFilenames(sort) {
    var dirpath = helper_1.getWorkingPath('articles');
    var listOrderedItems = sort === 'system' ? helper_1.listFilenames : helper_1.listFilenamesOrderByModified;
    var allFiles = listOrderedItems(dirpath);
    if (allFiles === null) {
        Log.error('プロジェクトルートの articles ディレクトリを取得できませんでした。`npx zenn init`を実行して作成してください');
        return [];
    }
    return allFiles ? allFiles.filter(function (f) { return f.match(/\.md$/); }) : []; // filter markdown files
}
function getArticleMetaData(slug) {
    var data = readArticleFile(slug);
    return data ? data.meta : null;
}
function readArticleFile(slug) {
    var fullpath = helper_1.getWorkingPath("articles/" + slug + ".md");
    var raw = helper_1.getFileRaw(fullpath);
    if (!raw) {
        Log.error(fullpath + "\u306E\u5185\u5BB9\u3092\u53D6\u5F97\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F");
        return null;
    }
    var _a = gray_matter_1.default(raw), data = _a.data, bodyMarkdown = _a.content;
    return {
        meta: __assign(__assign({}, data), { slug: slug }),
        bodyMarkdown: bodyMarkdown,
    };
}
